Flag Holding `L

first it says - 
You are not coming from "http://flagland.internal/”
which means we change the Referer http header to http://flagland.internal/

then we see
Unspecified "secret".
hence we put a get request with ?secret parameter.
then we get the message 
Incorrect secret. <!-- hint: secret is ____ which is the name of the protocol that both this server and your browser agrees on... —>
the answer is http, we give the parameter value "http"
?secret=http
then we get Sorry we don't have "GET" here but we might have other things like "FLAG”.
hence we change the request method to FLAG
and then we get the flag
`L
Web/Novel reader `L

in the challenge files provided, we can find out the location for this challenge and the web/novel reader 2 challenge also.
it exists in the public/../.. directory, hence to get there, we can see in the source code
name = unquote(name)
if(not name.startswith('public/')):
    return {'success': False, 'msg': 'You can only read public novels!'}, 400

unquote() is used to decode url encoding

hence to get there, we can url encode the url twice and write it like public/%252e%252e/%252e%252e/flag.txt
then we get the flag

Web/Novel reader 2 `L

to get flag for this, we can find it in private/A-Secret-Tale.txt 

in the source code, we see 

buf = readFile(name).split(' ')
buf = ' '.join(buf[0:session['words_balance']])+'... Charge your account to unlock more of the novel!'

hence, if we get session['words_balance'] to be -1, we can get the full file.
so combining that, with the previous vulnerability, we can get the flag.
`L

Web/Advanced JSON Cutifier `L

this uses 
https://github.com/google/go-jsonnet
library from github, you can find a vulnerability on going to the issues section.
there you find

https://github.com/google/go-jsonnet/issues/337

hence we can give payload like 
{
    "wow so advanced!!": importstr "/flag.txt”
}
to get the flag
